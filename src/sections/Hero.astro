---
import SectionLayout from "@layouts/SectionLayout.astro";
---

<!-- Background Image -->
<div 
style="height: var(5rem + 100vh);"
class="absolute inset-0 min-h-screen h-full  max-h-[52rem] md:h-full">
  <img
    src="/hero2.jpg"
    alt="Electrical infrastructure"
    class="w-full h-full object-cover"
  />
  <div class="absolute inset-0 bg-gradient-to-b from-primary/75 to-primary/30">
  </div>
</div>


 {/* Particles Canvas */}
 <canvas class="absolute inset-0"></canvas>

<SectionLayout
  id="home"
  class="relative flex items-center min-h-screen  max-h-[52rem] justify-start md:h-full text-start"
>
   <div class="max-w-4xl me-auto text-start">
    <h1 id="typed-text" class="text-4xl sm:text-5xl md:text-7xl font-bold text-white mb-6 leading-tight" >
      Expertos en <span class='text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-blue-600'> Construcción y Mantenimiento Industrial</span>
    </h1>
     
    </div>
  
    <div class="max-w-4xl me-auto text-start min-h-[300px] backdrop-blur-sm rounded-2xl border border-slate-700/50">
      <p class="text-lg text-slate-200 mb-8 max-w-2xl">
        Experiencia en proyectos de infraestructura eléctrica, sistemas de protección a tierra y mantenimiento
        eléctrico.
      </p>

      <div class="grid grid-cols-1 items-start sm:grid-cols-3 gap-6">
        <div class="bg-slate-800/70 backdrop-blur-sm p-3 md:p-6 rounded-xl border border-slate-700/50">
          <div class="text-3xl font-bold text-white mb-1">15+</div>
          <p class="text-slate-300">Años de experiencia</p>
        </div>
        <div class="bg-slate-800/70 backdrop-blur-sm p-3 md:p-6 rounded-xl border border-slate-700/50">
          <div class="text-3xl font-bold text-white mb-1">200+</div>
          <p class="text-slate-300">Proyectos completados</p>
        </div>
        <div class="bg-slate-800/70 backdrop-blur-sm p-3 md:p-6 rounded-xl border border-slate-700/50">
          <div class="text-3xl font-bold text-white mb-1">50+</div>
          <p class="text-slate-300">Clientes satisfechos</p>
        </div>
      </div>
    </div>

</SectionLayout>

<script>
  // @ts-ignore
  import Typewriter from "typewriter-effect/dist/core";

  new Typewriter("#typed-text", {
    autoStart: true,
    loop: true,
    delay: 75,
  }).typeString("<span class='text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-blue-600'>Ingeniería y Construcción</span> de Alta Calidad")
  .pauseFor(2000)
  .deleteAll()
  .start().typeString("Expertos en <span class='text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-blue-600'>Sistemas Eléctricos</span>")
  .pauseFor(2000)
  .deleteAll()
  .start()
  .typeString("Expertos en <span class='text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-blue-600'> Construcción y Mantenimiento Industrial</span>")
  .pauseFor(2000).deleteAll().start();


  window.addEventListener("load", () => {
  const canvas = document.querySelector("canvas") as HTMLCanvasElement;
  const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;
 

  // Set canvas dimensions
  const setCanvasDimensions = () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  };
  setCanvasDimensions();
  window.addEventListener("resize", setCanvasDimensions);

  // Particle class
  class Particle {
    x: number;
    y: number;
    size: number;
    speedX: number;
    speedY: number;
    color: string;

    constructor() {
      this.x = Math.random() * canvas.width;
      this.y = Math.random() * canvas.height;
      this.size = Math.random() * 2.5 + 0.5;
      this.speedX = Math.random() * 0.8 - 0.4;
      this.speedY = Math.random() * 0.8 - 0.4;
      this.color = "#60A5FA";
    }

    update() {
      this.x += this.speedX;
      this.y += this.speedY;

      if (this.x > canvas.width) this.x = 0;
      if (this.x < 0) this.x = canvas.width;
      if (this.y > canvas.height) this.y = 0;
      if (this.y < 0) this.y = canvas.height;
    }

    draw() {
      ctx.fillStyle = this.color;
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
      ctx.fill();
    }
  }

  // Create particles
  const particles: Particle[] = [];
  const particleCount = 70;
  for (let i = 0; i < particleCount; i++) {
    particles.push(new Particle());
  }

  // Animation loop
  const animate = () => {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Update and draw particles
    particles.forEach((particle) => {
      particle.update();
      particle.draw();
    });

    // Draw connections
    for (let a = 0; a < particles.length; a++) {
      for (let b = a + 1; b < particles.length; b++) {
        const dx = particles[a].x - particles[b].x;
        const dy = particles[a].y - particles[b].y;
        const distance = Math.sqrt(dx * dx + dy * dy);

        if (distance < 120) {
          ctx.beginPath();
          ctx.strokeStyle = `rgba(96, 165, 250, ${0.25 - distance / 500})`;
          ctx.lineWidth = 0.8;
          ctx.moveTo(particles[a].x, particles[a].y);
          ctx.lineTo(particles[b].x, particles[b].y);
          ctx.stroke();
        }
      }
    }

    requestAnimationFrame(animate);
  };

  animate();
});

</script>

<style>



</style>
